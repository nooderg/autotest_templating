package parsing

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"

	"gopkg.in/yaml.v3"
)

type AutoGenerated struct {
	Endpoints []struct {
		Path       string        `yaml:"path"`
		Parameters []interface{} `yaml:"parameters"`
		Method     Method        `yaml:"method"`
	} `yaml:"endpoints"`
}

type Method struct {
	Type        string   `yaml:"type"`
	OperationID string   `yaml:"operationId"`
	Summary     string   `yaml:"summary"`
	Description string   `yaml:"description"`
	Produces    []string `yaml:"produces"`
	Responses   Response `yaml:"responses"`
}

type Response struct {
	Code        string   `yaml:"code"`
	Description string   `yaml:"description"`
	Examples    Examples `yaml:"examples"`
}

type Examples struct {
	ApplicationJSON interface{} `yaml:"application/json"`
}

func ParseOpenApi(byteArray []byte) ([]byte, error) {
	tempFile, err := SaveToTempFile(byteArray)
	if err != nil {
		log.Fatal(err)
	}
	defer os.Remove(tempFile.Name())

	err = ExecuteBashScript("./pkg/parsing/linux-parsing.sh", tempFile.Name())
	if err != nil {
		log.Fatal(err)
	}

	// Close the temp file
	if err := tempFile.Close(); err != nil {
		log.Fatal(err)
	}

	// retrieve bash script output
	content, err := os.ReadFile("./temp-uploads/output.yml") // TODO: better use `os.ReadFile()` or `ioutil.ReadFile()` ?
	if err != nil {
		log.Fatal(err)
	}

	// unmarshall it
	var bashOutput AutoGenerated
	if err := yaml.Unmarshal([]byte(content), &bashOutput); err != nil {
		panic(err)
	}

	// send back the result
	json, err := json.Marshal(bashOutput)
	if err != nil {
		log.Fatal(err)
	}

	return json, err
}

func ExecuteBashScript(script string, swaggerPath string) error {
	cmd := exec.Command("/bin/sh", script, "-o", swaggerPath)
	stdout, _ := cmd.CombinedOutput()
	fmt.Println(string(stdout))

	return nil
}

func SaveToTempFile(byteArray []byte) (*os.File, error) {
	// Create a temporary file within our temp-images directory that follows
	// a particular naming pattern
	tempFile, err := ioutil.TempFile("temp-uploads", "upload-*.yml") // tempFile, err := ioutil.TempFile(os.TempDir(), "upload-*.yml")
	if err != nil {
		fmt.Println(err)
	}
	// defer os.Remove(tempFile.Name()) // defer tempFile.Close()

	// write this byte array to our temporary file
	if _, err = tempFile.WriteString(string(byteArray)); err != nil {
		log.Fatal("Failed to write to temporary file", err)
	}

	return tempFile, nil
}
